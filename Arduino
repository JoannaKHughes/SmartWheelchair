
#include <Wire.h>              //including libraries of I2C
#include <IRremote.h>          //including libraries of remote control
#define RECV_PIN  12        //pin 12 of IR remoter control receiver
#include <Servo.h>
IRrecv irrecv(RECV_PIN);      //defining pin 12 of IR remoter control
Servo myservo;
decode_results res;
decode_results results;         //cache of decode of IR remoter control
#define IR_Go       0x00ff629d //going forward
#define IR_Back     0x00ffa857  //going backward
#define IR_Left     0x00ff22dd  //turning left
#define IR_Right    0x00ffc23d  //turning right
#define IR_Stop     0x00ff02fd  //stop 
#define IR_Servo_L  0x00ff6897  //motor turning left
#define IR_Servo_R  0x00ff9867  //motor turning right
#define IR_Speed_UP     0x00ffb04f //increasing speed
#define IR_Speed_DOWN   0x00ff30cf //decreasing speed
#define IR_XunJi_Mode   0x00ff18e7
#define IR_Self_Control  0x00ff7a85  //ultrasonic distance detecting 
#define IR_IR_Control  0x00ff10ef
#define IR_Bluetooth_Control  0x00ff38c7
#define IR_ESC      0x00ff52ad  //quitting from remote control
//////////////////////////////////////////////////
#define SensorLeft    9   //sensor left pin of line tracking module 
#define SensorMiddle  10   //sensor middle pin of line tracking module
#define SensorRight   11  //sensor right pin of line tracking module
unsigned char SL;        //state of left sensor of line tracking module
unsigned char SM;        //state of middle sensor of line tracking module
unsigned char SR;        //state of right sensor of line tracking module
int inputPin=A0;  // ultrasonic module   ECHO to A0
int outputPin=A1;  // ultrasonic module  TRIG to A1
unsigned char serial_val;       // ultrasonic module  TRIG to A1
unsigned long Key;
unsigned long Key1;
#define Lpwm_pin  5     //pin of controlling speed---- ENA of motor driver board
#define Rpwm_pin  6    //pin of controlling speed---- ENB of motor driver board
int pinLB=2;             //pin of controlling turning---- IN1 of motor driver board
int pinLF=4;             //pin of controlling turning---- IN2 of motor driver board
int pinRB=7;            //pin of controlling turning---- IN3 of motor driver board
int pinRF=8;            //pin of controlling turning---- IN4 of motor driver board
int flag=0;
unsigned char Lpwm_val = 95; //initialized left wheel speed at 100
unsigned char Rpwm_val = 95; //initialized right wheel speed at 100
int Car_state=0;             //the working state of car
int myangle;                //defining variable of angle
int pulsewidth;              //defining variable of pulse width
unsigned char DuoJiao=90;    //initialized angle of motor at 90Â°


void Sensor_IO_Config(){     //IO initialized function of three line tracking , all setting at input
  pinMode(SensorLeft,INPUT);
  pinMode(SensorMiddle,INPUT);
  pinMode(SensorRight,INPUT);
}

void Sensor_Scan(void){ //function of reading-in signal of line tracking module 
  SL = digitalRead(SensorLeft);
  SM = digitalRead(SensorMiddle);
  SR = digitalRead(SensorRight);
}

void M_Control_IO_config(void){
  pinMode(pinLB,OUTPUT); // /pin 2
  pinMode(pinLF,OUTPUT); // pin 4
  pinMode(pinRB,OUTPUT); // pin 7
  pinMode(pinRF,OUTPUT);  // pin 8
  pinMode(Lpwm_pin,OUTPUT);  // pin 5 (PWM) 
  pinMode(Rpwm_pin,OUTPUT);  // pin6(PWM)   
}

void Set_Speed(unsigned char Left,unsigned char Right){ //function of setting speed
  analogWrite(Lpwm_pin,Left);
  analogWrite(Rpwm_pin,Right);
}

void advance(){    //  going forward
  digitalWrite(pinRB,LOW);  // making motor move towards right rear
  digitalWrite(pinRF,HIGH);
  digitalWrite(pinLB,LOW);  // making motor move towards left rear
  digitalWrite(pinLF,HIGH); 
  Car_state = 1;    
}

void turnR(){        //turning right(dual wheel)
  digitalWrite(pinRB,LOW);  //making motor move towards right rear
  digitalWrite(pinRF,HIGH);
  digitalWrite(pinLB,HIGH);
  digitalWrite(pinLF,LOW);  //making motor move towards left front
  Car_state = 4;
}

void turnL(){         //turning left(dual wheel)
  digitalWrite(pinRB,HIGH);
  digitalWrite(pinRF,LOW );   //making motor move towards right front
  digitalWrite(pinLB,LOW);   //making motor move towards left rear
  digitalWrite(pinLF,HIGH);
  Car_state = 3;
}    

void stopp(){ 
  digitalWrite(pinRB,HIGH);
  digitalWrite(pinRF,HIGH);
  digitalWrite(pinLB,HIGH);
  digitalWrite(pinLF,HIGH);
  Car_state = 5;
}

void back(){
  digitalWrite(pinRB,HIGH);  //making motor move towards right rear     
  digitalWrite(pinRF,LOW);
  digitalWrite(pinLB,HIGH);  //making motor move towards left rear
  digitalWrite(pinLF,LOW);
  Car_state = 2;
         
}

void stopAtObstacle(void){  
   if(Ultrasonic_Ranging(1) < 15)         
   {
       stopp();              
       delay(100);
    }
}
         
void Xunji_Mode(void){ //function of line tracking 
  stopAtObstacle();
  Sensor_Scan();
  if (SM == HIGH){/ middle sensor in black area
    if (SL == LOW & SR == HIGH){ // black on left, white on right, turn left
      turnR();
    }
    else if (SR == LOW & SL == HIGH){ // white on left, black on right, turn right
      turnL();
    }
    else{ // white on both sides, going forward
      advance();
      delay(500);
      stopp() ;
    }
  }
  else // middle sensor on white area
  {
    if (SL== LOW & SR == HIGH){// black on left, white on right, turn left
      turnR();
    }
    else if (SR == LOW & SL == HIGH){ // white on left, black on right, turn right
      turnL();
    }
    else{ // all white, stop
      back();
      delay(100);
      stopp(); 
    }
  }
}

int ask_pin_L(unsigned char Mode){ 
  int old_Ldistance;
  digitalWrite(outputPin, LOW);  
  delayMicroseconds(2); 
  digitalWrite(outputPin, HIGH); 
  delayMicroseconds(10); 
  digitalWrite(outputPin, LOW);    
  int Ldistance = pulseIn(inputPin, HIGH); 
  Ldistance= Ldistance/58;   // Transform pulse time to distance   
  if(Mode==2){
    Serial.print("\n L = ");
    Serial.print(Ldistance,DEC); 
    return Ldistance;
  }
  else{
    return Ldistance;
  }
} 

int ask_pin_R(unsigned char Mode){ 
  int old_Rdistance;
  digitalWrite(outputPin, LOW);  
  delayMicroseconds(2); 
  digitalWrite(outputPin, HIGH); // 
  delayMicroseconds(10); 
  digitalWrite(outputPin, LOW);    
  int Rdistance = pulseIn(inputPin, HIGH); 
  Rdistance= Rdistance/58;   // Transform pulse time to distance   
  if(Mode==3){
    Serial.print("\n R = ");
    Serial.print(Rdistance,DEC); 
    return Rdistance;
  }
   else{
    return Rdistance;
  } 
}
 
boolean lineTrackMode=false;

void Serial_Control(){  //serial control
   if(Serial.available()){ //to judge whether serial port receive data
    serial_val=Serial.read();  //reading value of Bluetooth serial port, giving the value to val
    switch(serial_val){
      case 'F':advance(); //UP
      break;
      case 'B': back();   //back
      break;
      case 'L':turnL();   //Left
      break;
      case 'R':turnR();  //Right
      break;
      case 'S':stopp();    //stop
      break;   
      case 'W': lineTrackMode=!lineTrackMode;
      break;
      case 'V': Self_Control();
      break;
      case 'X': 
        stopp();//only for forward
        delay(4500);
        advance();
        delay(800);
        stopp(); 
        break;
     }
     if(lineTrackMode) {
      Xunji_Mode();
    }
  } 
}  

void setup(){ 
  myservo.attach(A2);
  M_Control_IO_config();     //motor controlling the initialization of IO
  Set_Speed(Lpwm_val,Rpwm_val);  //setting initialized speed

  Sensor_IO_Config();            //initializing IO of line tracking module 
  irrecv.enableIRIn();           //starting receiving IR remote control signal
  pinMode(inputPin, INPUT);      //starting receiving IR remote control signal
  pinMode(outputPin, OUTPUT);    //IO of ultrasonic module
  Serial.begin(9600);            //initialized serial port , using Bluetooth as serial port, setting baud 
  myservo.write(DuoJiao);
  stopp();                       //stop
  delay(1000);
  myservo.detach();
  flag=8; // Start in Bluetooth mode
} 
